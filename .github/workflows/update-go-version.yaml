---
name: Update Golang version
run-name: ${{ github.actor }} has started Golang version update
on:
  push:
    branches:
      - 'update/go_*'
jobs:
  update-go-version:
    runs-on: ubuntu-latest
    outputs:
      new-go-version: ${{ steps.get-version-number.outputs.new-go-version }}
      new-go-major-version: ${{ steps.get-version-number.outputs.new-go-major-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}

      - name: Get old and new go versions
        id: get-go-version
        run: |
            OLD_GO_VERSION=$(grep -F "go-version: " .github/workflows/build-and-test.yaml)
            OLD_GO_VERSION=${${OLD_GO_VERSION}#"go-version: "}
            OLD_GO_MAJOR_VERSION=${${OLD_GO_VERSION}%.*}

            NEW_GO_VERSION=${${{ github.ref }}#"refs/heads/update/go_"}
            NEW_GO_MAJOR_VERSION=${${NEW_GO_VERSION}%.*}

            echo "Old go version $OLD_GO_VERSION"
            echo "Old go major version $OLD_GO_MAJOR_VERSION"

            echo "New go version $NEW_GO_VERSION"
            echo "New go major version $NEW_GO_MAJOR_VERSION"

            echo "old-go-version=${OLD_GO_VERSION}" >> "$GITHUB_OUTPUT"
            echo "old-go-major-version=${OLD_GO_MAJOR_VERSION}" >> "$GITHUB_OUTPUT"

            echo "new-go-version=${NEW_GO_VERSION}" >> "$GITHUB_OUTPUT"
            echo "new-go-major-version=${NEW_GO_MAJOR_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Update Go version in code to ${{ steps.get-version-number.outputs.new-go-version }}
        run: |
          find . -name '*.yaml' -exec sed -i -e 's/${{steps.get-go-version.outputs.old-go-version}}/${{steps.get-go-version.outputs.new-go-version}}/g' {} +;
          find . -name '*.yaml' -exec sed -i -e 's/${{steps.get-go-version.outputs.old-go-major-version}}/${{steps.get-go-version.outputs.new-go-major-version}}/g' {} +;
      
      - name: Create & push commit
        run: |
          git config --global user.email "nsmbot@networkservicmesh.io"
          git config --global user.name "NSMBot"
          git commit -s -a -m "Update Go version to ${{ steps.get-version-number.outputs.new-go-version }}"
          git push
    
  Update-Golang-version-check-PR-info:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' }}
    steps:
      - name: Print GitHub event info
        run: |
            echo "github.ref = ${{ github.ref }}"
            echo "github.actor = ${{ github.actor }}"
            echo "github.base_ref: ${{ github.base_ref }}"
            echo "github.head_ref: ${{ github.head_ref }}"
            echo "github.ref_name: ${{ github.ref_name }}"
            echo "github.sha: ${{ github.sha }}"
            echo "github.event.action: ${{ github.event.action }}"
            echo "github.event_name: ${{ github.event_name }}"
            echo "github.action: ${{ github.action }}"
            echo "github.event.ref: ${{ github.event.ref }}"
            echo "github.event.workflow_run.conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "github.event.workflow_run.event: ${{ github.event.workflow_run.event }}"
            echo "github.event.workflow_run.head_branch: ${{ github.event.workflow_run.head_branch }}"
            echo "github.event.workflow_run.head_commit: ${{ github.event.workflow_run.head_commit }}"
            echo "github.event.workflow_run.head_sha: ${{ github.event.workflow_run.head_sha }}"

  print-debug-info:
    if: ${{ github.event_name == 'workflow_run' }}
    name: Print debug info
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2

  check-mergeability:
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'update/go_') && github.actor == 'nsmbot' }}
    uses: ./.github/workflows/check-mergeability.yaml
    secrets:
      token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}

  automerge:
    needs: [check-mergeability]
    if: ${{ needs.check-mergeability.result == 'success' }}
    uses: ./.github/workflows/automerge.yaml
    secrets:
      token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}

  resolve_conflicts:
    needs: [check-mergeability]
    if: ${{ always() && needs.check-mergeability.result == 'failure' && needs.check-mergeability.outputs.pr_branch_ref != '' }}
    uses: ./.github/workflows/resolve-conflicts.yaml
    with:
      pr_branch_ref: ${{ needs.check-mergeability.outputs.pr_branch_ref }}
    secrets:
      token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}